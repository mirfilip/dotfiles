[alias]
	co = checkout
    mnff = merge --no-ff
	caa = commit -a --amend -C HEAD
	st = status
	br = branch
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	s = status -s
	prune-dry = remote prune origin --dry-run
	prune = remote prune origin
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	publish = "!git push -u origin $(git branch-name)"
	unpublish = "!git push origin :$(git branch-name)"
	diffc = diff --cached
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	conflicts = diff --name-only --diff-filter=U
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# List contributors with number of commits
	contrib = shortlog --summary --numbered
	ahead = !"git lg origin/develop..HEAD"
	amend = commit --amend --reuse-message=HEAD -C HEAD
	# Remove branches that have already been merged with main
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# Show the user email for the current repository.
	whoami = config user.email
[user]
	name = Mirosław Filip
	email = mirfilip@gmail.com
[push]
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[core]
	autocrlf = input
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

	pager = less
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = green
	changed = yellow
	untracked = cyan
[diff]
	# Detect copies as well as renames
	renames = copies
	# URL shorthands
[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[tag]
	sort = version:refname
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
[init]
	templateDir = ~/.config/git/template/
